####################################
# Default configuration of Unitils #
####################################

# This file contains default configuration values for unitils. This file should not be edited.
# All properties in this file can be overridden, either in the project specific properties file
# (unitils.properties) or in the local properties file (configured by unitils.configuration.customFileName).

# Name or path of the project specific properties file. The system will try to find this file in the classpath (recommended),
# the user home folder or the local filesystem
unitils.configuration.customFileName=unitils.properties
# Name or path of the user specific properties file. This file may contain the necessary parameters to connect to the
# developer's own unit test schema. It is recommended to override the name of this file in the project specific properties
# file, to include the name of the project. The system will try to find this file in the classpath, the user home folder
# (recommended) or the local filesystem.
unitils.configuration.localFileName=unitils-local.properties

# List of modules that is loaded. Overloading this list is normally not useful, unless you want to add a custom 
# module. Disabling a module can be performed by setting unitils.module.<modulename>.enabled to false.
# If a module's specific dependencies are not found (e.g. hibernate is not in you classpath), this module is not loaded,
# even if it is in this list and the enabled property is set to true. It's therefore not strictly necessary to disable
# any of these modules.
unitils.modules=database,dataset,dbunit,mock,easymock,inject,tapestry

#### Unitils core configuration ###
# For each module, the implementation class is listed in unitils.module.<modulename>.className, the sequence of the
# execution of their code is influenced by unitils.module.<modulename>.runAfter. Disabling a module can be performed by
# setting unitils.module.<modulename>.enabled to false.
unitils.module.database.className=org.unitils.database.DatabaseModule
unitils.module.database.runAfter=
unitils.module.database.enabled=true

unitils.module.dbunit.className=org.unitils.dbunit.DbUnitModule
unitils.module.dbunit.runAfter=
unitils.module.dbunit.enabled=true

unitils.module.dataset.className=org.unitils.dataset.DataSetModule
unitils.module.dataset.runAfter=
unitils.module.dataset.enabled=true

unitils.module.mock.className=org.unitils.mock.MockModule
unitils.module.mock.runAfter=
unitils.module.mock.enabled=true

unitils.module.easymock.className=org.unitils.easymock.EasyMockModule
unitils.module.easymock.runAfter=
unitils.module.easymock.enabled=true

unitils.module.inject.className=org.unitils.inject.InjectModule
unitils.module.inject.runAfter=mock
unitils.module.inject.enabled=true

unitils.module.tapestry.className=org.unitils.tapestry.TapestryUnitilsModule
unitils.module.tapestry.runAfter=
unitils.module.tapestry.enabled=true

### DatabaseModule Configuration ###

## Full qualified class name of an implementation of org.unitils.database.datasource.DataSourceFactory. This class is used
# to provide a DataSource for all database unit tests and for the DBMaintainer.
org.unitils.database.datasource.DataSourceFactory.implClassName=org.unitils.database.datasource.impl.DefaultDataSourceFactory

# Properties for the PropertiesDataSourceFactory
database.driverClassName=
database.url=
database.userName=
database.password=

# This property specifies the underlying DBMS implementation. Supported values are 'oracle', 'db2', 'mysql', 'hsqldb',
# 'postgresql', 'derby' and 'mssql'. 
database.dialect=

# A comma-separated list of all used database schemas. The first schema name is the default one, if no schema name is
# specified in for example a dbunit data set, this default one is used.
# A schema name is case sensitive if it's surrounded by database identifier quotes (e.g. " for oracle)
database.schemaNames=


### DatabaseModule's DbMaintainer configuration ###

# If set to true, the DBMaintainer will be used to update the unit test database schema. This is done once for each
# test run, when creating the DataSource that provides access to the unit test database.
updateDataBaseSchema.enabled=false

# Indicates the database must be recreated from scratch when an already executed script is updated. If false, the
# DBMaintainer will give an error when an existing script is updated.
dbMaintainer.fromScratch.enabled=true
# Indicates whether a from scratch update should be performed when the previous update failed, but
# none of the scripts were modified since that last update. If false a new update will be tried only when
# changes were made to the script files.
dbMaintainer.keepRetryingAfterError.enabled=false

# If set to true, all foreign key and not null constraints of the database are automatically disabled after the execution
# of the scripts.
dbMaintainer.disableConstraints=true
# If set to true, all database sequences and identity columns are set to a minimum value after the execution of the scripts.
# The minimum accepted sequence value is indicated by the property sequenceUpdater.lowestAcceptableSequenceValue
dbMaintainer.updateSequences=true
# Indicates whether the database should be 'cleaned' before scripts are executed by the dbMaintainer. If true, the
# records of all database tables, except for the ones listed in 'dbMaintainer.preserve.*' are deleted before executing
# the first script.
dbMaintainer.cleanDb=true


# If set to true an XSD or DTD will be generated that represents the structure of the database schema. This XSD or DTD can be
# used in datafiles to verify if they are up-to-date and to enable code completion.
# If you use the data set module, you do not need to configure this in the db-maintainer.
# Just put a correct path for property 'dataset.xsd.targetDirName' and the XSDs will be generated automatically
dbMaintainer.generateDataSetStructure.enabled=false
# Fully qualified name of the implementation of org.unitils.dbmaintainer.structure.DataSetStructureGenerator that is used.
# org.unitils.dbmaintainer.structure.impl.XsdDataSetStructureGenerator can be used to generate XSDs
# org.unitils.dbmaintainer.structure.impl.DtdDataSetStructureGenerator can be used to generate DTDs
org.unitils.dbmaintainer.structure.DataSetStructureGenerator.implClassName=org.unitils.dbmaintainer.structure.impl.XsdDataSetStructureGenerator
# DbUnit data set dtd file path
dataSetStructureGenerator.dtd.filename=
# DbUnit data set xsd file path
dataSetStructureGenerator.xsd.dirName=
# Suffix to use when generating complex types for tables
dataSetStructureGenerator.xsd.complexTypeSuffix=__type


# If set to true, the datasource injected onto test fields annotated with @TestDataSource or retrieved using 
# DatabaseUnitils#getTransactionalDataSource are wrapped in a transactional proxy
dataSource.wrapInTransactionalProxy=true


# Default operation that is used for getting a dbunit dataset into the database. Should be the fully qualified classname
# of an implementation of org.unitils.dbunit.datasetloadstrategy.DataSetLoadStrategy
DbUnitModule.DataSet.loadStrategy.default=org.unitils.dbunit.datasetloadstrategy.impl.CleanInsertLoadStrategy
# Default factory that is used to create a dataset object from a file for the @DataSet annotation
DbUnitModule.DataSet.factory.default=org.unitils.dbunit.datasetfactory.impl.MultiSchemaXmlDataSetFactory
# Default factory that is used to create a dataset object from a file for the @ExpectedDataSet annotation
DbUnitModule.ExpectedDataSet.factory.default=org.unitils.dbunit.datasetfactory.impl.MultiSchemaXmlDataSetFactory

# Fully qualified classname of the data set resolver
org.unitils.dbunit.datasetfactory.DataSetResolver.implClassName=org.unitils.dbunit.datasetfactory.impl.DefaultDataSetResolver
# If set to true, the data set name will be prefixed with the package name of the test (with . replaced by /)
dbUnit.datasetresolver.prefixWithPackageName=true
# Optional prefix for the data set file name. If it starts with '/' it is treated as an absolute path on the
# file system, if not, it is treated as a classpath resource. 
dbUnit.datasetresolver.pathPrefix=


# Fully qualified classnames of the different, dbms specific implementations of org.dbunit.dataset.datatype.IDataTypeFactory
org.dbunit.dataset.datatype.IDataTypeFactory.implClassName.oracle=org.dbunit.ext.oracle.OracleDataTypeFactory
org.dbunit.dataset.datatype.IDataTypeFactory.implClassName.db2=org.dbunit.ext.db2.Db2DataTypeFactory
org.dbunit.dataset.datatype.IDataTypeFactory.implClassName.hsqldb=org.dbunit.ext.hsqldb.HsqldbDataTypeFactory
org.dbunit.dataset.datatype.IDataTypeFactory.implClassName.mysql=org.dbunit.ext.mysql.MySqlDataTypeFactory
org.dbunit.dataset.datatype.IDataTypeFactory.implClassName.postgresql=org.dbunit.dataset.datatype.DefaultDataTypeFactory
org.dbunit.dataset.datatype.IDataTypeFactory.implClassName.derby=org.dbunit.dataset.datatype.DefaultDataTypeFactory
org.dbunit.dataset.datatype.IDataTypeFactory.implClassName.mssql=org.dbunit.ext.mssql.MsSqlDataTypeFactory


### DatabaseModule configuration ###
# Default behavior concerning execution of tests in a transaction. Supported values are 'disabled', 'commit' and 'rollback'.
# If set to disabled, test are not executed in a transaction by default. If set to commit, each test is run in a transaction,
# which is committed. If set to rollback, each test is run in a transaction, which is rolled back. 
database.default.transaction.mode=commit

### MockModule configuration ###
mockModule.logFullScenarioReport=true
mockModule.logObservedScenario=false
mockModule.logDetailedObservedScenario=false
mockModule.logSuggestedAsserts=false

### EasyMockModule configuration ###
# Default value for order checking of method invocation on mocks. Supported values are 'none' and 'strict'
EasyMockModule.RegularMock.invocationOrder.default=none
# Default value for the calls property of mocks. Supported values are 'lenient' and 'strict'
EasyMockModule.RegularMock.calls.default=strict
# Default value for order checking of method invocation on mocks. Supported values are 'none' and 'strict'
EasyMockModule.Mock.invocationOrder.default=none
EasyMockModule.Mock.calls.default=strict
EasyMockModule.Mock.order.default=lenient
EasyMockModule.Mock.dates.default=strict
EasyMockModule.Mock.defaults.default=ignore_defaults
# Indicates whether after every test, the expected method calls are verified on all mock objects that were injected on
# fields annotated with @Mock or created with EasyMockUnitils.createMock (i.e. the verify() method is invoked on all
# these mocks.
EasyMockModule.autoVerifyAfterTest.enabled=true

### InjectModule configuration ###
# Mode of accessing properties
InjectModule.InjectIntoStatic.restore.default=old_value
InjectModule.InjectIntoByType.propertyAccess.default=field
InjectModule.InjectIntoStaticByType.restore.default=old_value
InjectModule.InjectIntoStaticByType.propertyAccess.default=field
InjectModule.TestedObject.createIfNull.enabled=true


# By default names of tables, columns are not case sensitive, set to true to make the default case sensitive
dataset.casesensitive.default=false
# The default token that is used to define literal values in a data set
dataset.literaltoken.default==
# The default token that is used to define variables in a data set
dataset.variabletoken.default=$


# If set to true, the data set name will be prefixed with the package name of the test (with . replaced by /)
dataset.datasetresolver.prefixWithPackageName=true
# Optional prefix for the data set file name. If it starts with '/' it is treated as an absolute path on the
# file system, if not, it is treated as a classpath resource.
dataset.datasetresolver.pathPrefix=

# Name of the target dir for the data set XSD files and template XML files
# The directory name can be absolute or relative to the current working directory
dataset.xsd.targetDirName=

dataset.dateFormat=yyyy-MM-dd
dataset.timeFormat=HH:mm:ss
dataset.dateTimeFormat=yyyy-MM-dd HH:mm:ss

org.unitils.dataset.loadstrategy.LoadDataSetStrategy.implClassName.insert=org.unitils.dataset.loadstrategy.impl.InsertDataSetStrategy
org.unitils.dataset.loadstrategy.LoadDataSetStrategy.implClassName.cleaninsert=org.unitils.dataset.loadstrategy.impl.CleanInsertDataSetStrategy
org.unitils.dataset.loadstrategy.LoadDataSetStrategy.implClassName.refresh=org.unitils.dataset.loadstrategy.impl.RefreshDataSetStrategy


# Fully qualified class name of the data set resolver that will map data set names on actual data set files
org.unitils.dataset.resolver.DataSetResolver.implClassName=org.unitils.dataset.resolver.impl.DefaultDataSetResolver

org.unitils.dataset.rowsource.FileDataSetRowSourceFactory.implClassName=org.unitils.dataset.rowsource.impl.XmlFileDataSetRowSourceFactory
org.unitils.dataset.rowsource.InlineDataSetRowSourceFactory.implClassName=org.unitils.dataset.rowsource.impl.DefaultInlineDataSetRowSourceFactory

org.unitils.dataset.assertstrategy.AssertDataSetStrategy.implClassName=org.unitils.dataset.assertstrategy.impl.DefaultAssertDataSetStrategy
org.unitils.dataset.assertstrategy.DataSetComparator.implClassName=org.unitils.dataset.assertstrategy.impl.DefaultDataSetComparator
org.unitils.dataset.assertstrategy.DatabaseContentLogger.implClassName=org.unitils.dataset.assertstrategy.impl.DefaultDatabaseContentLogger

org.unitils.dataset.structure.DataSetStructureGenerator.implClassName=org.unitils.dataset.structure.impl.XsdDataSetStructureGenerator

org.unitils.dataset.sqltypehandler.SqlTypeHandler.implClassName=org.unitils.dataset.sqltypehandler.impl.TextSqlTypeHandler
org.unitils.dataset.sqltypehandler.SqlTypeHandler.implClassName.BIT=org.unitils.dataset.sqltypehandler.impl.NumberSqlTypeHandler
org.unitils.dataset.sqltypehandler.SqlTypeHandler.implClassName.TINYINT=org.unitils.dataset.sqltypehandler.impl.NumberSqlTypeHandler
org.unitils.dataset.sqltypehandler.SqlTypeHandler.implClassName.SMALLINT=org.unitils.dataset.sqltypehandler.impl.NumberSqlTypeHandler
org.unitils.dataset.sqltypehandler.SqlTypeHandler.implClassName.INTEGER=org.unitils.dataset.sqltypehandler.impl.NumberSqlTypeHandler
org.unitils.dataset.sqltypehandler.SqlTypeHandler.implClassName.BIGINT=org.unitils.dataset.sqltypehandler.impl.NumberSqlTypeHandler
org.unitils.dataset.sqltypehandler.SqlTypeHandler.implClassName.FLOAT=org.unitils.dataset.sqltypehandler.impl.NumberSqlTypeHandler
org.unitils.dataset.sqltypehandler.SqlTypeHandler.implClassName.REAL=org.unitils.dataset.sqltypehandler.impl.NumberSqlTypeHandler
org.unitils.dataset.sqltypehandler.SqlTypeHandler.implClassName.DOUBLE=org.unitils.dataset.sqltypehandler.impl.NumberSqlTypeHandler
org.unitils.dataset.sqltypehandler.SqlTypeHandler.implClassName.NUMERIC=org.unitils.dataset.sqltypehandler.impl.NumberSqlTypeHandler
org.unitils.dataset.sqltypehandler.SqlTypeHandler.implClassName.DECIMAL=org.unitils.dataset.sqltypehandler.impl.NumberSqlTypeHandler
org.unitils.dataset.sqltypehandler.SqlTypeHandler.implClassName.CHAR=org.unitils.dataset.sqltypehandler.impl.TextSqlTypeHandler
org.unitils.dataset.sqltypehandler.SqlTypeHandler.implClassName.VARCHAR=org.unitils.dataset.sqltypehandler.impl.TextSqlTypeHandler
org.unitils.dataset.sqltypehandler.SqlTypeHandler.implClassName.LONGVARCHAR=org.unitils.dataset.sqltypehandler.impl.TextSqlTypeHandler
org.unitils.dataset.sqltypehandler.SqlTypeHandler.implClassName.DATE=org.unitils.dataset.sqltypehandler.impl.DateSqlTypeHandler
org.unitils.dataset.sqltypehandler.SqlTypeHandler.implClassName.TIME=org.unitils.dataset.sqltypehandler.impl.DateSqlTypeHandler
org.unitils.dataset.sqltypehandler.SqlTypeHandler.implClassName.TIMESTAMP=org.unitils.dataset.sqltypehandler.impl.DateSqlTypeHandler
org.unitils.dataset.sqltypehandler.SqlTypeHandler.implClassName.BINARY=org.unitils.dataset.sqltypehandler.impl.TextSqlTypeHandler
org.unitils.dataset.sqltypehandler.SqlTypeHandler.implClassName.VARBINARY=org.unitils.dataset.sqltypehandler.impl.TextSqlTypeHandler
org.unitils.dataset.sqltypehandler.SqlTypeHandler.implClassName.LONGVARBINARY=org.unitils.dataset.sqltypehandler.impl.TextSqlTypeHandler
org.unitils.dataset.sqltypehandler.SqlTypeHandler.implClassName.NULL=org.unitils.dataset.sqltypehandler.impl.TextSqlTypeHandler
org.unitils.dataset.sqltypehandler.SqlTypeHandler.implClassName.OTHER=org.unitils.dataset.sqltypehandler.impl.TextSqlTypeHandler
org.unitils.dataset.sqltypehandler.SqlTypeHandler.implClassName.JAVA_OBJECT=org.unitils.dataset.sqltypehandler.impl.TextSqlTypeHandler
org.unitils.dataset.sqltypehandler.SqlTypeHandler.implClassName.DISTINCT=org.unitils.dataset.sqltypehandler.impl.TextSqlTypeHandler
org.unitils.dataset.sqltypehandler.SqlTypeHandler.implClassName.STRUCT=org.unitils.dataset.sqltypehandler.impl.TextSqlTypeHandler
org.unitils.dataset.sqltypehandler.SqlTypeHandler.implClassName.ARRAY=org.unitils.dataset.sqltypehandler.impl.TextSqlTypeHandler
org.unitils.dataset.sqltypehandler.SqlTypeHandler.implClassName.BLOB=org.unitils.dataset.sqltypehandler.impl.TextSqlTypeHandler
org.unitils.dataset.sqltypehandler.SqlTypeHandler.implClassName.CLOB=org.unitils.dataset.sqltypehandler.impl.TextSqlTypeHandler
org.unitils.dataset.sqltypehandler.SqlTypeHandler.implClassName.REF=org.unitils.dataset.sqltypehandler.impl.TextSqlTypeHandler
org.unitils.dataset.sqltypehandler.SqlTypeHandler.implClassName.DATALINK=org.unitils.dataset.sqltypehandler.impl.TextSqlTypeHandler
org.unitils.dataset.sqltypehandler.SqlTypeHandler.implClassName.BOOLEAN=org.unitils.dataset.sqltypehandler.impl.BooleanSqlTypeHandler


