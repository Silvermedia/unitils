####################################
# Default configuration of Unitils #
####################################

# This file contains default configuration values for unitils. This file should not be edited.
# All properties in this file can be overridden, either in the project specific properties file
# (unitils.properties) or in the local properties file (unitils-local.properties).

# Name or path of the project specific properties file. The system will try to find this file in the classpath (recommended)
# the user home folder or the local filesystem
unitils.configuration.customFileName=unitils.properties
# Name or path of the user specific properties file. This file should contain the necessary parameters to connect to the
# developer's own unit test schema. It is recommended to override the name of this file in the project specific properties
# file, to include the name of the project. The system will try to find this file in the classpath, the user home folder
# (recommended) or the local filesystem.
unitils.configuration.localFileName=unitils-local.properties

# List of modules that is loaded. Overloading this list is useful when e.g. you don't use Hibernate, and you want to
# be able to use Unitils without having Hibernate in the classpath.
unitils.modules=database,dbunit,hibernate,easymock,inject

#### Unitils core configuration ###
unitils.module.database.className=org.unitils.db.DatabaseModule
unitils.module.database.runAfter=
unitils.module.database.enabled=true

unitils.module.hibernate.className=org.unitils.hibernate.HibernateModule
unitils.module.hibernate.runAfter=database
unitils.module.hibernate.enabled=true

unitils.module.dbunit.className=org.unitils.dbunit.DbUnitModule
unitils.module.dbunit.runAfter=database,hibernate
unitils.module.dbunit.enabled=true

unitils.module.easymock.className=org.unitils.easymock.EasyMockModule
unitils.module.easymock.runAfter=
unitils.module.easymock.enabled=true

unitils.module.inject.className=org.unitils.inject.InjectModule
unitils.module.inject.runAfter=easymock
unitils.module.inject.enabled=true

### DatabaseModule Configuration ###

## Full qualified class name of an implementation of org.unitils.dbmaintainer.config.DataSourceFactory. This class is used to
# provide a DataSource for all database unit tests and for the DBMaintainer
dataSourceFactory.className=org.unitils.dbmaintainer.config.PropertiesDataSourceFactory
# Properties for the PropertiesDataSourceFactory
dataSource.driverClassName=org.hsqldb.jdbcDriver
dataSource.url=jdbc:hsqldb:mem:unitils
dataSource.schemaName=public
dataSource.userName=sa
dataSource.password=

### DatabaseModule's DbMaintainer configuration ###

# If set to true, the DBMaintainer will be used to update the unit test database schema. This is done once for each
# test run, before the execution of the first class annotated with @DatabaseTest, if any.
updateDataBaseSchema.enabled=true

# This property specifies the underlying DBMS implementation. Supported values are 'oracle', 'db2', 'mysql' and 'hsqldb'.
# The value of this property defines which vendor specific implementations of ConstraintsDisabler, SequenceUpdater and
# DbClearer are chosen.
database.dialect=oracle

# Indicates if recreating the database from scratch when an already executed script is updated is enabled. If false, the
# DBMaintainer will give an error when an existing script is updated.
dbMaintainer.fromScratch.enabled=true




# Fully qualified name of the implementation of org.unitils.dbmaintainer.maintainer.version.VersionSource that is used.
# The recommeded value is 'org.unitils.dbmaintainer.maintainer.version.DBVersionSource', which will retrieve the database version
# from the updated database schema itself. Another implementation could e.g. retrieve the version from a file.
dbMaintainer.versionSource.className=org.unitils.dbmaintainer.maintainer.version.DBVersionSource
# Name of the table that contains the version of the database. The version info is stored in the first row of this table,
# in the columns defined by the properties dbMaintainer.dbVersionSource.versionIndexColumnName and
# dbMaintainer.dbVersionSource.versionTimeStampColumnName
dbMaintainer.dbVersionSource.tableName=db_version
# Name of the column in which the version index of the database is stored. This index refers to the index of the last
# script file that has been executed on the database
dbMaintainer.dbVersionSource.versionIndexColumnName=version_index
# Name of the column in which the version timestamp of the database is stored. This timestamp refers to the last time
# that the database has been updated.
dbMaintainer.dbVersionSource.versionTimeStampColumnName=last_updated_on
# Database type of the column in which the vesion index and version timestamp of the database are stored. This data type
# should be sufficiently large, in order to be able to store values of the long Java type
dbMaintainer.dbVersionSource.versionColumnDataType.oracle=INTEGER
dbMaintainer.dbVersionSource.versionColumnDataType.mysql=BIGINT
dbMaintainer.dbVersionSource.versionColumnDataType.hsqldb=BIGINT
dbMaintainer.dbVersionSource.versionColumnDataType.db2=BIGINT

# Fully qualified name of the implementation of org.unitils.dbmaintainer.maintainer.script.ScriptSource that is used.
# The recommeded value is 'org.unitils.dbmaintainer.maintainer.script.FileScriptSource', which will retrieve the scripts
# from the local file system. Another implementation could e.g. retrieve the scripts directly from the Version Control
# System.
dbMaintainer.scriptSource.className=org.unitils.dbmaintainer.maintainer.script.FileScriptSource
# Extension of the files containing the database update scripts
dbMaintainer.fileScriptSource.fileExtension=sql
# Directory in which the database update scripts are located.
dbMaintainer.fileScriptSource.dir=

# Fully qualified name of the implementation of org.unitils.dbmaintainer.handler.StatementHandler that is used. The
# recommeded value is 'org.unitils.dbmaintainer.handler.JDBCStatementHandler', which will execute the scripts using JDBC. Another
# implementation could e.g. execute these scripts with a vendor specific script executer.
dbMaintainer.statementHandler.className=org.unitils.dbmaintainer.handler.JDBCStatementHandler

# If set to true, an implementation of org.unitils.dbmaintainer.constraints.ConstraintsDisabler will be used to disable
# the foreign key and not null constraints of the unit test database schema.
# The ConstraintsDisabler is configured using the properties specified below. The property with key 'database.dialect'
# specifies which implementation is used.
dbMaintainer.disableConstraints.enabled=true
# Following properties define different supported implementations of the ConstraintsDisabler
constraintsDisabler.className.oracle=org.unitils.dbmaintainer.constraints.OracleConstraintsDisabler
constraintsDisabler.className.db2=org.unitils.dbmaintainer.constraints.DB2ConstraintsDisabler
constraintsDisabler.className.hsqldb=org.unitils.dbmaintainer.constraints.HsqldbConstraintsDisabler
# Fully qualified name of the implementation of org.unitils.dbmaintainer.handler.StatementHandler that is used. The
# recommeded value is 'org.unitils.dbmaintainer.handler.DBStatementHandler', which will execute the statements on the
# database. Another implementation could e.g. write the statements to a file.
constraintsDisabler.statementHandler.className=org.unitils.dbmaintainer.handler.JDBCStatementHandler

# If set to true, an implementation of org.unitils.dbmaintainer.sequences.SequenceUpdater will be used to update the
# sequences to a suffiently high value, so that test data can be inserted without problems.
# The SequenceUpdater is configured using the properties specified below. The property with key 'database.dialect'
# specifies which implementation is used.
dbMaintainer.updateSequences.enabled=true
# Following properties define different supported implementations of the SequenceUpdater
sequenceUpdater.className.oracle=org.unitils.dbmaintainer.sequences.OracleSequenceUpdater
sequenceUpdater.className.hsqldb=org.unitils.dbmaintainer.sequences.HsqldbSequenceUpdater
# Lowest acceptable value of a sequence in a unit test database. The SequenceUpdater will make sure all sequences
# have this value or higher before proceeding
sequenceUpdater.sequencevalue.lowestacceptable=1000

# Fully qualified classname of the implementation of org.unitils.dbmaintainer.clear.DBClearer, one for each supported
# database dialect.
dbMaintainer.dbClearer.className.oracle=org.unitils.dbmaintainer.clear.OracleDBClearer
dbMaintainer.dbClearer.className.hsqldb=org.unitils.dbmaintainer.clear.HsqldbDBClearer

# Fully qualified classname of the implementation of org.unitils.dbmaintainer.clean.DBCleaner.
dbMaintainer.dbCleaner.className=org.unitils.dbmaintainer.clear.DefaultDBCleaner

# Comma separated list of table names. The tables in question will not be cleared the DBCleaner. Tables like these
# typically contain rather static, read only or type data. The database version table, indicated by the property
# dbMaintainer.dbVersionSource.tableName, is preserved automatically, and doesn't have to be included in this list.
# Note that the DBClearer doesn't take this list into account. So when fromScratch is enabled
# (dbMaintainer.fromScratch.enabled=true), these tables will be removed anyway. This 
dbMaintainer.tablesToPreserve=

# If set to true, an implemention of org.unitils.dbmaintainer.dtd.DtdGenerator will be used to generate a DTD that
# represents the database schema. This DTD can be used in datafiles to verifyAll if they are up-to-date and to enable
# code completion.
dbMaintainer.generateDTD.enabled=true
# Fully qualified name of the implementation of org.unitils.dbmaintainer.dtd.DtdGenerator that is used.
# The recommended value is 'org.unitils.dbmaintainer.dtd.FlatXmlDataSetDtdGenerator'
dbMaintainer.database.dtdGenerator.className=org.unitils.dbmaintainer.dtd.FlatXmlDataSetDtdGenerator
# DbUnit database DTD file path
dtdGenerator.dtd.filename=


### HibernateModule configuration ###
# Name of hibernate config files for testing purposes. Should be in classpath.
hibernatetestcase.hibernate.cfg.configfiles=
# Concrete Hibernate org.hibernate.cfg.Configuration class. Should be either org.hibernate.cfg.Configuration or
# org.hibernate.cfg.AnnotationConfiguration
hibernatetestcase.hibernate.cfg.configurationclass=org.hibernate.cfg.AnnotationConfiguration 


#todo docs
### EasyMockModule configuration ###
# Default value for order checking of method invocation on mocks. Supported values are 'none' and 'strict'
EasyMockModule.Mock.InvocationOrder.default=none
# Default value for the returns property of mocks. Supported values are 'nice' and 'strict'
EasyMockModule.Mock.Returns.default=nice
# Default value for order checking of method invocation on mocks. Supported values are 'none' and 'strict'
EasyMockModule.LenientMock.InvocationOrder.default=none
EasyMockModule.LenientMock.Returns.default=nice
EasyMockModule.LenientMock.Order.default=lenient
EasyMockModule.LenientMock.Dates.default=strict
EasyMockModule.LenientMock.Defaults.default=ignore_defaults

### InjectModule configuration ###
# Mode of accessing properties
InjectModule.AutoInject.PropertyAccessType.default=field
InjectModule.AutoInjectStatic.PropertyAccessType.default=field
