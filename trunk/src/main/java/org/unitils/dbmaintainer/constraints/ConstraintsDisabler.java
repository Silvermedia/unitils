/*
 * Copyright (C) 2006, Ordina
 *
 * Distributable under LGPL license.
 * See terms of license at gnu.org.
 */
package org.unitils.dbmaintainer.constraints;

import java.sql.Connection;

import javax.sql.DataSource;

import org.apache.commons.configuration.Configuration;
import org.unitils.dbmaintainer.handler.StatementHandler;

/**
 * Defines the contract for implementations that disable all foreign key and not-null constraints on an database.
 * The implementation guarantees that, when the method disableConstraints() is is called once after each database update,
 * and when the method enableConstraintsOnConnection is called on the <code>Connection</code> object, all foreign key
 * and not-null constraints are disabled for this <code>Connection</code>.
 */
public interface ConstraintsDisabler {

    /**
     * Initializes the ConstraintsDisabler
     *
     * @param configuration
     * @param dataSource
     * The dataSource that defines the connection to the database
     * @param statementHandler
     * Implementation of StatementHandler, to which all constraints disabling and enabling statements are issued, that
     */
    void init(Configuration configuration, DataSource dataSource, StatementHandler statementHandler);

    /**
     * Generates statements to disable the constraints of the associated database, and passes them to the
     * associated {@link StatementHandler}. This method does only guarantee that constraints are fully disabled after the
     * method enableConstraintsOnConnection has been called on the <code>Connection</code> object that is used.
     */
    void disableConstraints();

    /**
     * Makes sure that for a connection to a database on which the statements generated by the method disableConstraints
     * were executed after the last database update, all foreign key and not-null constraints are disabled.
     *
     * @param conn
     */
    void disableConstraintsOnConnection(Connection conn);

}
