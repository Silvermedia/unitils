####################################
# Default configuration of Unitils #
####################################

# This file contains default configuration values for unitils. This file should not be edited.
# All properties in this file can be overridden, either in the project specific properties file
# (unitils.properties) or in the local properties file (configured by unitils.configuration.customFileName).

# Name or path of the project specific properties file. The system will try to find this file in the classpath (recommended),
# the user home folder or the local filesystem
unitils.configuration.customFileName=unitils.properties
# Name or path of the user specific properties file. This file should contain the necessary parameters to connect to the
# developer's own unit test schema. It is recommended to override the name of this file in the project specific properties
# file, to include the name of the project. The system will try to find this file in the classpath, the user home folder
# (recommended) or the local filesystem.
unitils.configuration.localFileName=unitils-local.properties

# List of modules that is loaded. Overloading this list is normally not useful, unless you want to add a custom written
# module. Disabling a module can be performed by setting unitils.module.<modulename>.enabled to false.
# If a module's specific dependencies are not found (e.g. hibernate is not in you classpath), this module is not loaded,
# even if it is in this list and the enabled property is set to true. It's therefore not strictly necessary to disable
# any of these modules.
unitils.modules=database,dbunit,hibernate,easymock,inject,spring

#### Unitils core configuration ###
# For each module, the implementation class is listed in unitils.module.<modulename>.className, the sequence of the
# execution of their code is influenced by unitils.module.<modulename>.runAfter. Disabling a module can be performed by
# setting unitils.module.<modulename>.enabled to false.
unitils.module.database.className=org.unitils.database.DatabaseModule
unitils.module.database.runAfter=
unitils.module.database.enabled=true

unitils.module.hibernate.className=org.unitils.hibernate.HibernateModule
unitils.module.hibernate.runAfter=database
unitils.module.hibernate.enabled=true

unitils.module.dbunit.className=org.unitils.dbunit.DbUnitModule
unitils.module.dbunit.runAfter=database,hibernate
unitils.module.dbunit.enabled=true

unitils.module.easymock.className=org.unitils.easymock.EasyMockModule
unitils.module.easymock.runAfter=
unitils.module.easymock.enabled=true

unitils.module.inject.className=org.unitils.inject.InjectModule
unitils.module.inject.runAfter=easymock
unitils.module.inject.enabled=true

unitils.module.spring.className=org.unitils.spring.SpringModule
unitils.module.spring.runAfter=
unitils.module.spring.enabled=true

### DatabaseModule Configuration ###

## Full qualified class name of an implementation of org.unitils.database.config.DataSourceFactory. This class is used
# to provide a DataSource for all database unit tests and for the DBMaintainer.
org.unitils.database.config.DataSourceFactory.implClassName=org.unitils.database.config.PropertiesDataSourceFactory

# Properties for the PropertiesDataSourceFactory
database.driverClassName=
database.url=
database.userName=
database.password=

# This property specifies the underlying DBMS implementation. Supported values are 'oracle', 'db2', 'mysql', 'hsqldb' and 'postgresql'.
# The value of this property defines which vendor specific implementations of DbSupport and ConstraintsDisabler are chosen.
database.dialect=

# A comma-separated list of all used database schemas. The first schema name is the default one, if no schema name is
# specified in for example a dbunit data set, this default one is used.
# A schema name is case sensitive if it's surrounded by database identifier quotes (eg " for oracle)
database.schemaNames=

### DatabaseModule's DbMaintainer configuration ###

# If set to true, the DBMaintainer will be used to update the unit test database schema. This is done once for each
# test run, when creating the DataSource that provides access to the unit test database.
updateDataBaseSchema.enabled=false

# Indicates the database must be recreated from scratch when an already executed script is updated. If false, the
# DBMaintainer will give an error when an existing script is updated.
dbMaintainer.fromScratch.enabled=true
# Indicates whether a from scratch update should be performed when the previous update failed, but
# none of the scripts were modified since that last update. If false a new update will be tried only when
# changes were made to the script files.
dbMaintainer.keepRetryingAfterError.enabled=true

# Indicates whether database code like triggers, types, packages, functions and stored procedures should be cleared from
# the database before installing a new version of the database code (stored procedures and functions - configured using
# the property dbMaintainer.fileScriptSource.code.location). When clearing the database (when creating from scratch) the
# database code is cleared anyway, even when this property is set to false
dbMaintainer.clearDbCode.enabled=true

# Fully qualified classnames of implementations of org.unitils.dbmaintainer.dbsupport.DbSupport.
org.unitils.dbmaintainer.dbsupport.DbSupport.implClassName.oracle=org.unitils.dbmaintainer.dbsupport.OracleDbSupport
org.unitils.dbmaintainer.dbsupport.DbSupport.implClassName.hsqldb=org.unitils.dbmaintainer.dbsupport.HsqldbDbSupport
org.unitils.dbmaintainer.dbsupport.DbSupport.implClassName.mysql=org.unitils.dbmaintainer.dbsupport.MySqlDbSupport
org.unitils.dbmaintainer.dbsupport.DbSupport.implClassName.db2=org.unitils.dbmaintainer.dbsupport.Db2DbSupport
org.unitils.dbmaintainer.dbsupport.DbSupport.implClassName.postgresql=org.unitils.dbmaintainer.dbsupport.PostgreSqlDbSupport

# Fully qualified name of the implementation of org.unitils.dbmaintainer.maintainer.version.VersionSource that is used.
# The default value is 'org.unitils.dbmaintainer.maintainer.version.DBVersionSource', which retrieves the database version
# from the updated database schema itself. Another implementation could e.g. retrieve the version from a file.
org.unitils.dbmaintainer.version.VersionSource.implClassName=org.unitils.dbmaintainer.version.impl.DBVersionSource
# Name of the table that contains the version of the database. The version info is stored in the first row of this table,
# in the columns defined by the properties dbMaintainer.dbVersionSource.versionIndexColumnName,
# dbMaintainer.dbVersionSource.versionTimeStampColumnName, dbMaintainer.dbVersionSource.lastUpdateSucceededColumnName,
# dbMaintainer.dbVersionSource.codeScriptsTimeStampColumnName and dbMaintainer.dbVersionSource.lastCodeUpdateSucceededColumnName
dbMaintainer.dbVersionSource.tableName=db_version
# Name of the column in which the version index of the database is stored. This index refers to the index of the last
# script file that has been executed on the database
dbMaintainer.dbVersionSource.versionIndexColumnName=version_index
# Name of the column in which the version timestamp of the database is stored. This timestamp refers the the highest
# last modification date of the update scripts that have been executed on the database
dbMaintainer.dbVersionSource.versionTimeStampColumnName=last_updated_on
# Name of the column in which is stored whether the last update succeeded or not. If the last update gave an error, and
# dbMaintainer.fromScratch.enabled is set to true, the database will be cleared and rebuilt from scratch during the next
# update
dbMaintainer.dbVersionSource.lastUpdateSucceededColumnName=last_update_succeeded
# Name of the column in which the version timestamp of the database is stored. This timestamp refers the the highest
# last modification date of the code scripts that have been executed on the database
dbMaintainer.dbVersionSource.codeScriptsTimeStampColumnName=codescripts_timestamp
# Name of the column in which is stored whether the last code update succeeded or not.
dbMaintainer.dbVersionSource.lastCodeUpdateSucceededColumnName=last_codeupdate_succeeded

# Fully qualified name of the implementation of org.unitils.dbmaintainer.maintainer.script.ScriptSource that is used.
# The default value is 'org.unitils.dbmaintainer.maintainer.script.FileScriptSource', which will retrieve the scripts
# from the local file system.
org.unitils.dbmaintainer.script.ScriptSource.implClassName=org.unitils.dbmaintainer.script.impl.FileScriptSource
# Extension of the files containing the database update scripts
dbMaintainer.fileScriptSource.fileExtension=sql
# Comma separated list of directories and files in which the database update scripts are located. Directories in this
# list are recursively searched for files.
dbMaintainer.fileScriptSource.scripts.location=
# Comma separated list of directories and files in which the database code (functions, stored procedures, ...) scripts
# are located. Directories in this list are recursively searched for files.
dbMaintainer.fileScriptSource.code.location=

# Fully qualified name of the implementation of org.unitils.dbmaintainer.script.StatementHandler that is used. The
# default value is 'org.unitils.dbmaintainer.script.impl.JDBCStatementHandler', which will execute the statements on the
# database. Another implementation could e.g. write the statements to a file.
org.unitils.dbmaintainer.script.StatementHandler.implClassName=org.unitils.dbmaintainer.script.impl.JDBCStatementHandler

# Fully qualified name of the implementation of org.unitils.dbmaintainer.script.ScriptRunner that is used. The
# default value is 'org.unitils.dbmaintainer.script.SQLScriptRunner', which executes a regular SQL script.
org.unitils.dbmaintainer.script.ScriptRunner.implClassName=org.unitils.dbmaintainer.script.impl.SQLScriptRunner
org.unitils.dbmaintainer.script.CodeScriptRunner.implClassName=org.unitils.dbmaintainer.script.DefaultCodeScriptRunner

# If set to true, an implementation of org.unitils.dbmaintainer.constraints.ConstraintsDisabler will be used to disable
# the foreign key and not null constraints of the unit test database schema.
# The ConstraintsDisabler is configured using the properties specified below. The property with key 'database.dialect'
# specifies which implementation is used.
dbMaintainer.disableConstraints.enabled=true
# Following properties define different supported implementations of the ConstraintsDisabler
org.unitils.dbmaintainer.structure.ConstraintsDisabler.implClassName.oracle=org.unitils.dbmaintainer.structure.impl.OracleStyleConstraintsDisabler
org.unitils.dbmaintainer.structure.ConstraintsDisabler.implClassName.db2=org.unitils.dbmaintainer.structure.impl.OracleStyleConstraintsDisabler
org.unitils.dbmaintainer.structure.ConstraintsDisabler.implClassName.hsqldb=org.unitils.dbmaintainer.structure.impl.MySqlStyleConstraintsDisabler
org.unitils.dbmaintainer.structure.ConstraintsDisabler.implClassName.mysql=org.unitils.dbmaintainer.structure.impl.MySqlStyleConstraintsDisabler
org.unitils.dbmaintainer.structure.ConstraintsDisabler.implClassName.postgresql=org.unitils.dbmaintainer.structure.impl.PostgreSqlStyleConstraintsDisabler

# If set to true, an implementation of org.unitils.dbmaintainer.sequences.SequenceUpdater will be used to update the
# sequences to a suffiently high value, so that test data can be inserted without problems.
# The SequenceUpdater is configured using the properties specified below. The property with key 'database.dialect'
# specifies which implementation is used.
dbMaintainer.updateSequences.enabled=true
# Fully qualified classname of the implementation of org.unitils.dbmaintainer.sequences.SequenceUpdater
org.unitils.dbmaintainer.structure.SequenceUpdater.implClassName=org.unitils.dbmaintainer.structure.impl.DefaultSequenceUpdater
# Lowest acceptable value of a sequence in a unit test database. The SequenceUpdater will make sure all sequences
# have this value or higher before proceeding
sequenceUpdater.sequencevalue.lowestacceptable=1000

# Fully qualified classname of the implementation of org.unitils.dbmaintainer.clear.DBClearer
org.unitils.dbmaintainer.clean.DBClearer.implClassName=org.unitils.dbmaintainer.clean.impl.DefaultDBClearer

# Fully qualified classname of the implementation of org.unitils.dbmaintainer.clear.DBCodeClearer
org.unitils.dbmaintainer.clean.DBCodeClearer.implClassName=org.unitils.dbmaintainer.clean.impl.DefaultDBCodeClearer


# Fully qualified classname of the implementation of org.unitils.dbmaintainer.clean.DBCleaner.
org.unitils.dbmaintainer.clean.DBCleaner.implClassName=org.unitils.dbmaintainer.clean.impl.DefaultDBCleaner

# Indicates whether the database should be cleaned before data updates are executed by the dbMaintainer. If true, the
# records of all database tables, except the ones listed in 'dbMaintainer.cleandb.tablesToPreserve' or
# 'dbMaintainer.cleardb.itemsToPreserve', are deleted
dbMaintainer.cleanDb.enabled=true
# Comma separated list of table names. The tables listed here will not be cleaned by the DBCleaner. Tables like these
# typically contain rather static, read only or type data. The database version table, indicated by the property
# dbMaintainer.dbVersionSource.tableName, is preserved automatically, and doesn't have to be included in this list.
# The tables in the list specified by dbMaintainer.cleardb.itemsToPreserve are also left untouched.
# Note that the DBClearer doesn't take this list into account. So when fromScratch is enabled
# (dbMaintainer.fromScratch.enabled=true), these tables will be removed anyway. If you want some tables/views/sequences/...
# to be preserved when creating the database from scratch, add them to dbMaintainer.cleardb.itemsToPreserve
dbMaintainer.cleanDb.tablesToPreserve=

# Comma separated list of database items that may not be dropped or cleared by the db maintainer when
# updating the database from scratch (dbMaintainer.fromScratch.enabled=true).
dbMaintainer.dbClearer.preserve.tables=
dbMaintainer.dbClearer.preserve.views=
dbMaintainer.dbClearer.preserve.synonyms=
dbMaintainer.dbClearer.preserve.sequences=

# If set to true, an implemention of org.unitils.dbmaintainer.dtd.DtdGenerator will be used to generate a DTD that
# represents the database schema. This DTD can be used in datafiles to verify if they are up-to-date and to enable
# code completion.
dbMaintainer.generateDTD.enabled=true
# Fully qualified name of the implementation of org.unitils.dbmaintainer.dtd.DtdGenerator that is used.
# The recommended value is 'org.unitils.dbmaintainer.dtd.FlatXmlDataSetDtdGenerator'
org.unitils.dbmaintainer.structure.DtdGenerator.implClassName=org.unitils.dbmaintainer.structure.impl.FlatXmlDataSetDtdGenerator
# DbUnit database DTD file path
dtdGenerator.dtd.filename=

# Fully qualified classnames of the different, dbms specific implementations of
# org.dbunit.dataset.datatype.IDataTypeFactory
org.dbunit.dataset.datatype.IDataTypeFactory.implClassName.oracle=org.dbunit.ext.oracle.OracleDataTypeFactory
org.dbunit.dataset.datatype.IDataTypeFactory.implClassName.db2=org.dbunit.ext.db2.Db2DataTypeFactory
org.dbunit.dataset.datatype.IDataTypeFactory.implClassName.hsqldb=org.dbunit.ext.hsqldb.HsqldbDataTypeFactory
org.dbunit.dataset.datatype.IDataTypeFactory.implClassName.mysql=org.dbunit.ext.mysql.MySqlDataTypeFactory
org.dbunit.dataset.datatype.IDataTypeFactory.implClassName.postgresql=org.dbunit.dataset.datatype.DefaultDataTypeFactory


### EasyMockModule configuration ###
# Default value for order checking of method invocation on mocks. Supported values are 'none' and 'strict'
EasyMockModule.RegularMock.InvocationOrder.default=none
# Default value for the calls property of mocks. Supported values are 'lenient' and 'strict'
EasyMockModule.RegularMock.Calls.default=strict
# Default value for order checking of method invocation on mocks. Supported values are 'none' and 'strict'
EasyMockModule.Mock.InvocationOrder.default=none
EasyMockModule.Mock.Calls.default=strict
EasyMockModule.Mock.Order.default=lenient
EasyMockModule.Mock.Dates.default=strict
EasyMockModule.Mock.Defaults.default=ignore_defaults
# Indicates whether after every test, the expected method calls are verified on all mock objects that were injected on
# fields annotated with @Mock or created with EasyMockUnitils.createMock (i.e. the verify() method is invoked on all
# these mocks.
EasyMockModule.autoVerifyAfterTest.enabled=true

### InjectModule configuration ###
# Mode of accessing properties
InjectModule.InjectIntoStatic.Restore.default=old_value
InjectModule.InjectIntoByType.PropertyAccess.default=field
InjectModule.InjectIntoStaticByType.Restore.default=old_value
InjectModule.InjectIntoStaticByType.PropertyAccess.default=field
InjectModule.TestedObject.createIfNull.enabled=true

### HibernateModule configuration ###
HibernateModule.configuration.implClassName=org.hibernate.cfg.AnnotationConfiguration
HibernateModule.currentsessioncontext.implClassName=org.unitils.hibernate.util.SimpleCurrentSessionContext

### SpringModule configuration ###
SpringModule.applicationContextFactory.implClassName=org.unitils.spring.util.ClassPathXmlApplicationContextFactory