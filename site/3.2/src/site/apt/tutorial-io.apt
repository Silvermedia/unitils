Injection

* {Installation}
~~~~~~~~~~~~~~~~
    If you are using maven, you can add following dependency to your project.

%{include|source=pom.xml|id=io|verbatim=true|set-first-line=1|pad-line-numbers=2}

    If you are not using maven you can download the unitils-with-dependencies.zip. The required jar, unitils-io.jar, can be
    found in the unitils-io folder, the required dependencies, in the unitils-io/lib folder.


* {File Content}
~~~~~~~~~~~~~~~~
    Unitils offers some utility methods to read files into object. The types currently supported are txt files to a
    java.lang.String and Properties file to a java.util.Properties


** {The defaults}
~~~~~~~~~~~~~~~~~

   The String annotated with <FileContent> will be filled up with the file that can be found in the same filepath and
   the same name as the test. Instead of *.java the extension should be *.txt .

   The Property annotated with <FileContent> will be filled up with the file that can be found in the same filepath and
   the same name as the test. Instead of *.java the extension should be *.properties .

   The <FileContent> can take a encoding as input. All default java encoding can be used. If the jre supports it, so does
   unitils.

%{include|source=org/unitils/io/example1/MyFileTest.java|id=fileContent|verbatim=true|set-first-line=1|pad-line-numbers=2}

** {Overriding the defaults}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

    When defining the value, the IO module will not search for the default file location, but instead use the parameter
    given to determine which file to load. The default extension does not matter anymore. Without a leading '/' the file
    path is relative tot the path of the test.

%{include|source=org/unitils/io/example2/MyFileTest.java|id=fileContent|verbatim=true|set-first-line=1|pad-line-numbers=2}

* {Temporary File}
~~~~~~~~~~~~~~~~~~
   When a file with type java.io.file is annotated with TemporaryFile, unitils will fill up the File before the test is run
   The File will have a name in line with the fully qualified name of the test plus the test method and .tmp to end with.

%{include|source=org/unitils/io/example3/MyFileTest.java|id=temporaryFile|verbatim=true|set-first-line=1|pad-line-numbers=2}

    A file can also be annotated with the annotation TemporaryFolder. Its almost the same as the temporary file, only this
    time a directory is created. The only difference is the name, it will also be the fully qualified name and method name
    but without extension.
    When filling in the value in the annotation a file with the given name will be created in the temporary directory.

%{include|source=org/unitils/io/example4/MyFileTest.java|id=temporaryFile|verbatim=true|set-first-line=1|pad-line-numbers=2}

    The files will always be created in the given temporary directory. By default, the temporary directory set by the jvm will be used.
    But it can be overriden in the unitils.properties with the setting : IOModule.temp.directory=
    The setting will work as a normal java file considering absolute or relative file paths.



