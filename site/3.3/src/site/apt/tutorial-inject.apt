Injection

* {Installation}
~~~~~~~~~~~~~~~~
    If you are using maven, you can add following dependency to your project.

%{include|source=pom.xml|id=inject|verbatim=true|set-first-line=1|pad-line-numbers=2}

    If you are not using maven you can download the unitils-with-dependencies.zip. The required jar, unitils-inject.jar, can be
    found in the unitils-inject folder, the required dependencies, in the unitils-inject/lib folder.


* {Injecting objects}
~~~~~~~~~~~~~~~~~~~~~
    Unitils offers some utility methods to do injection of objects such as mocks into a target object (e.g. the tested object).
    There does not have to be any setter method, the fields can be private and can even be static.

** {Marking the tested object}

    The tested object is the actual instance that is being tested. The field of this tested object can be annotated with
    an <TestedObject> annotation. This will then become the default target for the injection. Unitils will automatically create
    an instance of the tested object if no instance is explicitly created in your test.

%{include|source=org/unitils/inject/example2/MyServiceTest.java|id=testedObject|verbatim=true|set-first-line=1|pad-line-numbers=2}

    In this example we're writing a test for <MyService>. The test is unitils-enabled (it extends UnitilsJUnit4) so that
    unitils will handle the annotations. The field that holds the <myService> instance that is going to be used in
    the tests is marked as <TestedObject>. Unitils will automatically create a new <MyService> instance and will use
    it as default target for the injection annotations (see below). If you do not want unitils to create the instance,
    you can always create the instance yourself.

    Note that you're not required to use the <TestedObject> annotation, all the injection methods and annotations
    offer the possibility to explicitly specify the target object.


** {Injecting into a named property}

%{include|source=org/unitils/inject/example1/MyServiceTest.java|id=injectInto|verbatim=true|set-first-line=1|pad-line-numbers=2}

    This will inject the <myDao> value into a field named <myDaoField> of the tested object, <myService>. Unitils injects
    the value directly in the field, there does not have to be a setter and the field can be private. The value for the attribute property of <@Inject> can be
    an arbitrary {{{http://www.ognl.org/}OGNL}} expression.

    Instead of using a tested object, you can also specify the target object explicitly:

%{include|source=org/unitils/inject/example3/MyServiceTest.java|id=injectInto|verbatim=true|set-first-line=1|pad-line-numbers=2}


** {Injection by type}

%{include|source=org/unitils/inject/example4/MyServiceTest.java|id=injectIntoByType|verbatim=true|set-first-line=1|pad-line-numbers=2}

    This will inject the <myDao> value into a field of type <MyDao> of the tested object, <myService>. There is no need to name the
    actual field, unitils will look for the best matching field type. If there are multiple possible targets, an
    exception will be raised. You will then have to use the <InjectInto> and explicitly name the property instead.

    As with the <InjectInto> annotation you can also specify the target object explicitly:

%{include|source=org/unitils/inject/example5/MyServiceTest.java|id=injectIntoByType|verbatim=true|set-first-line=1|pad-line-numbers=2}


** {Static injection into a named property}

%{include|source=org/unitils/inject/example6/MyServiceTest.java|id=injectIntoStatic|verbatim=true|set-first-line=1|pad-line-numbers=2}

    This will inject the <myDao> value into the static <myDaoSingleton> field of the <MyService> class. After the test
    the value of the field will automatically be reset to its old value. This avoids that subsequent tests use the
    value that was set by this tests (it's a static field).

    Following restores actions are possible:

    * old value (default): put back the original value

    * no restore: do nothing, leave the injected value

    * null or 0 value: set the static field to null for objects or 0 for primitives

    []

    The restore action can be specified in the annotation.

%{include|source=org/unitils/inject/example7/MyServiceTest.java|id=restore|verbatim=true|set-first-line=1|pad-line-numbers=2}

    If no restore action is specified, the default, old value, will be used. This default is configurable by setting following property:

%{include|source=example.properties|id=restore|verbatim=true|set-first-line=1|pad-line-numbers=2}


* Injection example with mocks

    In this example, we create a mock of type <MyDao> and inject it in the tested object <MyService>. Because the test does
    not create the <myService> instance, it will be automatically created by unitils.

%{include|source=org/unitils/mock/example2/MyServiceInjectTest.java|id=inject|verbatim=true|set-first-line=1|pad-line-numbers=2}